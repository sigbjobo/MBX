/******************************************************************************
Copyright 2019 The Regents of the University of California.
All Rights Reserved.

Permission to copy, modify and distribute any part of this Software for
educational, research and non-profit purposes, without fee, and without
a written agreement is hereby granted, provided that the above copyright
notice, this paragraph and the following three paragraphs appear in all
copies.

Those desiring to incorporate this Software into commercial products or
use for commercial purposes should contact the:
Office of Innovation & Commercialization
University of California, San Diego
9500 Gilman Drive, Mail Code 0910
La Jolla, CA 92093-0910
Ph: (858) 534-5815
FAX: (858) 534-7345
E-MAIL: invent@ucsd.edu

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE, EVEN IF THE UNIVERSITY
OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS. THE UNIVERSITY OF CALIFORNIA MAKES NO
REPRESENTATIONS AND EXTENDS NO WARRANTIES OF ANY KIND, EITHER IMPLIED OR
EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR THAT THE USE OF THE
SOFTWARE WILL NOT INFRINGE ANY PATENT, TRADEMARK OR OTHER RIGHTS.
******************************************************************************/

#include "x2b_A1B2Z2_C1D4_deg3_exp0_v1x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp0(const double& r0, const double& k, const double* p1, const double* p2);

    double v_coul0(const double& r0, const double& k, const double* p1, const double* p2);

    void grads(const double& gg, double* grd1, double* grd2, const double* p1, const double* p2);

    double g[3];  // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp0(const double& r0, const double& k, const double* p1, const double* p2) {
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0] * g[0] + g[1] * g[1] + g[2] * g[2]);

    const double exp1 = std::exp(k * (r0 - r));
    const double gg = -k * exp1 / r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul0(const double& r0, const double& k, const double* p1, const double* p2) {
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0] * g[0] + g[1] * g[1] + g[2] * g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k * (r0 - r));
    const double rinv = 1.0 / r;
    const double val = exp1 * rinv;

    const double gg = -(k + rinv) * val * rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double* grd1, double* grd2, const double* p1, const double* p2) {
    for (size_t i = 0; i < 3; i++) {
        double d = gg * g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh, const double& in_plane_g, const double& out_of_plane_g, double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2, const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh, const double& in_plane_g, const double& out_of_plane_g, double* x1, double* x2) {
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {oh1[1] * oh2[2] - oh1[2] * oh2[1], oh1[2] * oh2[0] - oh1[0] * oh2[2],
                         oh1[0] * oh2[1] - oh1[1] * oh2[0]};

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5 * in_plane_g * (oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g * v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2, const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const {
    const double gm[3] = {g1[0] - g2[0], g1[1] - g2[1], g1[2] - g2[2]};

    const double t1[3] = {oh2[1] * gm[2] - oh2[2] * gm[1], oh2[2] * gm[0] - oh2[0] * gm[2],
                          oh2[0] * gm[1] - oh2[1] * gm[0]};

    const double t2[3] = {oh1[1] * gm[2] - oh1[2] * gm[1], oh1[2] * gm[0] - oh1[0] * gm[2],
                          oh1[0] * gm[1] - oh1[1] * gm[0]};

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5 * in_plane_g * gsum;

        const double gh1 = in_plane + out_of_plane_g * t1[i];
        const double gh2 = in_plane - out_of_plane_g * t2[i];

        grd[i + 0] += gsum - (gh1 + gh2);  // O
        grd[i + 3] += gh1;                 // H1
        grd[i + 6] += gh2;                 // H2
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //
}  // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2b_A1B2Z2_C1D4_deg3_exp0 {

//----------------------------------------------------------------------------//

x2b_A1B2Z2_C1D4_v1x::x2b_A1B2Z2_C1D4_v1x(std::string mon1, std::string mon2) {
    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==
    if (mon1 == "h2o" && mon2 == "ch4") {
        coefficients = std::vector<double>{-4.705592178443418e+00,  // 0
                                           5.304215547050470e+01,   // 1
                                           1.307267101044928e+02,   // 2
                                           -9.667264117687289e+01,  // 3
                                           -4.424051457757592e+01,  // 4
                                           1.632493590431310e+02,   // 5
                                           -1.023403530957030e+02,  // 6
                                           5.259303972326240e-01,   // 7
                                           -4.521852169450543e+01,  // 8
                                           -1.839632260407622e+00,  // 9
                                           4.760818752636861e+00,   // 10
                                           -1.621456870441988e+00,  // 11
                                           -7.316935814377310e-01,  // 12
                                           1.341031506658764e+01,   // 13
                                           1.871555986440542e-01,   // 14
                                           -6.727923523975636e+01,  // 15
                                           -2.955268602303643e+01,  // 16
                                           2.523917737149420e+01,   // 17
                                           4.143719157321728e+01,   // 18
                                           -2.178658831771795e+00,  // 19
                                           1.068550735357830e+01,   // 20
                                           3.697203209677283e+01,   // 21
                                           -7.755565349467365e-01,  // 22
                                           3.806392147976698e+00,   // 23
                                           -3.397793051515942e+01,  // 24
                                           9.495517635897745e+00,   // 25
                                           1.220273579127994e+01,   // 26
                                           -9.123234822062680e+01,  // 27
                                           -4.830235482949751e+00,  // 28
                                           -5.531438565657245e+01,  // 29
                                           9.053140750273705e+00,   // 30
                                           -3.195638922240021e+00,  // 31
                                           8.275980389820683e+00,   // 32
                                           4.322980649045744e-01,   // 33
                                           -4.994937628247374e+01,  // 34
                                           1.154432523185302e+01,   // 35
                                           2.755088993586059e-01,   // 36
                                           1.291957932902036e-01,   // 37
                                           -1.268000874960676e+02,  // 38
                                           -2.082916736406626e+00,  // 39
                                           -2.151226252886438e+00,  // 40
                                           6.292156386755779e+01,   // 41
                                           6.228913425849193e-01,   // 42
                                           -9.270810545818379e+01,  // 43
                                           -1.422613501040533e+01,  // 44
                                           9.903605496862212e+01,   // 45
                                           -7.336825945357381e+01,  // 46
                                           -6.795944995354282e-03,  // 47
                                           1.583313000241620e+00,   // 48
                                           1.940782871272852e+02,   // 49
                                           2.909683819231224e+00,   // 50
                                           2.234079287540814e+02,   // 51
                                           9.254215438857626e+00,   // 52
                                           4.963948099526669e+00,   // 53
                                           1.455836338781378e+01,   // 54
                                           -4.407347800030206e+01,  // 55
                                           4.663163620847556e+01,   // 56
                                           4.204943580130644e+01,   // 57
                                           9.283960343503432e+00,   // 58
                                           1.445677772634533e+01,   // 59
                                           -3.869921035746166e+00,  // 60
                                           3.452292496432445e+00,   // 61
                                           -2.022968395250265e+01,  // 62
                                           -5.171195533598306e+01,  // 63
                                           -7.526690846723185e-01,  // 64
                                           -1.493929965323646e+01,  // 65
                                           -5.632164128617023e+01,  // 66
                                           -9.014294226846763e+00,  // 67
                                           2.063384211685013e+02,   // 68
                                           -7.421539262671413e+01,  // 69
                                           9.013068221558430e+01,   // 70
                                           5.094956607803381e+01,   // 71
                                           4.401703647378475e+00,   // 72
                                           4.081119804055404e-02,   // 73
                                           -2.101850882200347e+00,  // 74
                                           -3.189618132552691e+00,  // 75
                                           -6.911955506475770e-01,  // 76
                                           -5.003454556746552e-01,  // 77
                                           -1.525345279071508e-01,  // 78
                                           -1.424626260437993e+00,  // 79
                                           4.410232102692155e-01,   // 80
                                           5.807172064889892e-01,   // 81
                                           -4.000617972424005e+00,  // 82
                                           8.951000541610720e-01,   // 83
                                           -1.997748326142698e-01,  // 84
                                           8.438341783581622e-01,   // 85
                                           -2.121869212357891e-01,  // 86
                                           -9.178721816779011e-01,  // 87
                                           1.627167637089397e-02,   // 88
                                           -8.825156171078492e+00,  // 89
                                           2.441572148315791e+00,   // 90
                                           -3.876345314398955e+00,  // 91
                                           -1.081745716357910e-01,  // 92
                                           3.344448259094748e-02,   // 93
                                           2.426537056533830e-01,   // 94
                                           -2.166720120528979e-02,  // 95
                                           -6.267240218260751e-02,  // 96
                                           1.024808060820017e-01,   // 97
                                           3.617422423433428e-01,   // 98
                                           7.741627538399402e-01,   // 99
                                           8.447021814320734e-01,   // 100
                                           4.276040727819284e-01,   // 101
                                           -1.268247068547107e-01,  // 102
                                           5.404624697314897e+01,   // 103
                                           2.068417599968188e-01,   // 104
                                           3.031550292053070e-02,   // 105
                                           1.353066042609813e-02,   // 106
                                           -2.610975317736229e-03,  // 107
                                           -2.822958531906605e-01,  // 108
                                           -7.008302904602706e-02,  // 109
                                           -2.026245749650493e-01,  // 110
                                           -4.077873490034666e+00,  // 111
                                           7.693342466648337e-01,   // 112
                                           -4.525178787090274e-01,  // 113
                                           -2.033889010330584e+00,  // 114
                                           -2.387396563053294e+00,  // 115
                                           2.323278591273399e-02,   // 116
                                           -5.497212299717750e-03,  // 117
                                           -1.190319131622155e-01,  // 118
                                           -2.826737442528068e+00,  // 119
                                           3.079832557396597e-02,   // 120
                                           1.393218549642157e+00,   // 121
                                           -3.905106465778448e+00,  // 122
                                           3.630658877504546e-01,   // 123
                                           1.361354812492386e+00,   // 124
                                           1.464915245344310e+00,   // 125
                                           -2.792683246980551e-01,  // 126
                                           1.563910923496027e-01,   // 127
                                           8.148262963908188e-01,   // 128
                                           1.149238057033825e-02,   // 129
                                           1.225532672965490e+01,   // 130
                                           2.076749724654203e-03,   // 131
                                           1.355935690483371e-01,   // 132
                                           6.111354974477125e-01,   // 133
                                           -2.026877399524514e+00,  // 134
                                           -4.175323572030989e-03,  // 135
                                           1.927398936824205e-02,   // 136
                                           1.466259251619041e-02,   // 137
                                           -1.445677490135527e-01,  // 138
                                           -2.471817544224844e-03,  // 139
                                           -8.080667973393098e-02,  // 140
                                           6.185688103467492e-01,   // 141
                                           1.225782116826079e-01,   // 142
                                           -5.300754751102789e+00,  // 143
                                           2.091428106630379e-01,   // 144
                                           -3.485344444014817e-01,  // 145
                                           -2.649903780507658e-02,  // 146
                                           -6.384109140118753e-02,  // 147
                                           -1.722787380998847e+00,  // 148
                                           2.509158669810196e-02,   // 149
                                           1.359053490558949e-02,   // 150
                                           1.811728865035012e-01,   // 151
                                           7.110285605944679e-02,   // 152
                                           6.845621451256730e-02,   // 153
                                           1.548634296466449e+01,   // 154
                                           -7.840356359841778e-02,  // 155
                                           2.140244104317886e+00,   // 156
                                           -7.109497021725079e-02,  // 157
                                           2.059732541587643e-01,   // 158
                                           3.833529651261598e-04,   // 159
                                           -3.570894293695299e+01,  // 160
                                           -8.864295932763844e-02,  // 161
                                           3.571700066408977e+00,   // 162
                                           -8.718315708127013e-02,  // 163
                                           -5.677771964746964e-01,  // 164
                                           4.707113924433722e+00,   // 165
                                           -8.088301173999487e-01,  // 166
                                           -1.212623258661404e-02,  // 167
                                           8.335880486040052e-02,   // 168
                                           -1.950050385736675e-02,  // 169
                                           2.939583600238971e-01,   // 170
                                           7.126504396941599e-02,   // 171
                                           5.516467501273341e+00,   // 172
                                           -6.398242680084240e-02,  // 173
                                           2.931895832745831e+00,   // 174
                                           4.098470656763507e-03,   // 175
                                           -3.095151377099442e-01,  // 176
                                           -1.215531448857752e-02,  // 177
                                           3.903517356297966e+00,   // 178
                                           -3.188737051564245e-01,  // 179
                                           1.695249192453746e-01,   // 180
                                           2.099819386238003e-02,   // 181
                                           9.791406036581072e-03,   // 182
                                           -2.019524004190341e+00,  // 183
                                           -4.588763864216849e-02,  // 184
                                           4.276559480207237e-01,   // 185
                                           -3.495836336063903e-01,  // 186
                                           -1.018381130173697e-02,  // 187
                                           3.572568088138501e-01,   // 188
                                           5.767839130105550e-03,   // 189
                                           -6.984176330780163e-01,  // 190
                                           -9.878707560357302e-01,  // 191
                                           -1.298154077408546e+00,  // 192
                                           -3.092814055405412e+00,  // 193
                                           2.096080124557661e+00,   // 194
                                           -3.615278580552865e-03,  // 195
                                           -9.351838911707325e-01,  // 196
                                           2.172502859416511e+00,   // 197
                                           1.010620705501400e-01,   // 198
                                           1.304120053551796e+00,   // 199
                                           7.982146175931639e-04,   // 200
                                           1.220876408727107e-01,   // 201
                                           -1.601154785570905e+00,  // 202
                                           1.255791746656147e-02,   // 203
                                           1.606383998690636e-02,   // 204
                                           1.400416851652825e-01,   // 205
                                           8.796717834637031e-02,   // 206
                                           -2.719021208014407e+00,  // 207
                                           -9.409319828788018e-01,  // 208
                                           1.495673093558093e-02,   // 209
                                           5.303167317937178e+00,   // 210
                                           1.883593031755596e+00,   // 211
                                           -3.575534805569621e+00,  // 212
                                           -1.387340178222192e+00,  // 213
                                           1.711393577169160e+01,   // 214
                                           -7.315822788917395e-03,  // 215
                                           -5.991055838902352e-01,  // 216
                                           3.562652492455821e-02,   // 217
                                           1.094019891783345e-02,   // 218
                                           1.184962492011174e-01,   // 219
                                           -7.421462518432982e-01,  // 220
                                           1.400543000366830e-01,   // 221
                                           -3.675069116920130e-01,  // 222
                                           -4.731022874148011e-03,  // 223
                                           -4.581655417165186e-02,  // 224
                                           1.217418468892945e+00,   // 225
                                           -6.322290483957567e-01,  // 226
                                           -1.336861111875000e-03,  // 227
                                           -1.624041677983575e-01,  // 228
                                           -5.283434114758753e-03,  // 229
                                           5.465476228882124e-02,   // 230
                                           3.120550579921800e-03,   // 231
                                           -6.224913593761997e-02,  // 232
                                           -5.814431864705346e-01,  // 233
                                           -3.229983916086273e+00,  // 234
                                           -1.704879935735906e-01,  // 235
                                           -1.006270653049414e-01,  // 236
                                           1.217811688458444e-02,   // 237
                                           -4.210258572918717e-02,  // 238
                                           9.892058254651720e-02,   // 239
                                           -3.001497067916478e-02,  // 240
                                           1.507270421224790e-02,   // 241
                                           1.444523957869866e+00,   // 242
                                           -9.469438331658797e-01,  // 243
                                           1.006571492191906e+00,   // 244
                                           -2.507054872960604e+00,  // 245
                                           -6.336598763647506e-01,  // 246
                                           1.063410899234350e+00,   // 247
                                           -1.059822744010955e-01,  // 248
                                           -3.002041895061117e-02,  // 249
                                           3.250745152820275e-01,   // 250
                                           1.135821684690450e-01,   // 251
                                           1.495455898657318e-02,   // 252
                                           -3.384264297325123e+00,  // 253
                                           1.099738748688277e+00,   // 254
                                           -9.416682896788570e+00,  // 255
                                           -1.075832691691698e-01,  // 256
                                           -6.477408094998539e-02,  // 257
                                           -1.351518477355997e-01,  // 258
                                           -6.440995416658325e-02,  // 259
                                           -5.312012886288985e+01,  // 260
                                           -6.256214414894001e-01,  // 261
                                           4.772303352265856e+00,   // 262
                                           -1.242423135390121e-01,  // 263
                                           7.670016106723980e-01,   // 264
                                           -7.604209243980501e-04,  // 265
                                           1.281030619200715e+01,   // 266
                                           3.104957945143527e-04,   // 267
                                           3.035003604669928e-01,   // 268
                                           -4.204901052852855e-02,  // 269
                                           1.805740057628093e-02,   // 270
                                           -6.106751944194986e-02,  // 271
                                           -1.634355516729898e+00,  // 272
                                           2.371136971124606e-03,   // 273
                                           -1.001491660871248e+01,  // 274
                                           -3.550295326371692e-01,  // 275
                                           -7.919742063273032e-02,  // 276
                                           1.059416747079023e+01,   // 277
                                           4.247836564315318e-01,   // 278
                                           4.351814629379741e-02,   // 279
                                           1.171245575904907e+00,   // 280
                                           -2.518107568975460e-02,  // 281
                                           5.456914028367212e-02,   // 282
                                           6.889903224694380e-03,   // 283
                                           -9.451420258576189e-01,  // 284
                                           -2.430328539322727e-03,  // 285
                                           2.585465761767173e-02,   // 286
                                           -8.830159293129611e-05,  // 287
                                           6.540003883944109e-03,   // 288
                                           -1.814400400676306e-01,  // 289
                                           -5.493253558232317e+00,  // 290
                                           1.016890022190865e+01,   // 291
                                           -4.670718354423862e-01,  // 292
                                           3.084087460427012e-01,   // 293
                                           1.836557128924515e-01,   // 294
                                           1.238429753823462e-01,   // 295
                                           -1.957573486744821e-02,  // 296
                                           8.119575774829349e-02,   // 297
                                           1.691880093857746e-02,   // 298
                                           4.177589119017283e+00,   // 299
                                           2.742748450664810e-02,   // 300
                                           -3.118367849811000e+01,  // 301
                                           -1.366985622444181e-01,  // 302
                                           5.781522504155058e+01,   // 303
                                           2.959189454237010e-02,   // 304
                                           5.013592070631473e-01,   // 305
                                           4.300221992329900e-02,   // 306
                                           1.676062014859930e-03,   // 307
                                           -2.592696746977677e-02,  // 308
                                           1.158235642561772e+01,   // 309
                                           -8.650413694802354e-01,  // 310
                                           -1.072874269292950e+00,  // 311
                                           -7.653310947668827e-01,  // 312
                                           2.333076386554086e-01,   // 313
                                           1.842805368658262e+00,   // 314
                                           5.080391739662585e-01,   // 315
                                           2.042742213810687e-02,   // 316
                                           1.494382129633854e-01,   // 317
                                           -1.485046256633529e+00,  // 318
                                           6.590311450129834e-01,   // 319
                                           -4.176124125105776e-01,  // 320
                                           4.186801309486265e-03,   // 321
                                           -4.246384468017719e-01,  // 322
                                           3.192411974623693e-01,   // 323
                                           -3.668080438616008e+00,  // 324
                                           -2.290585911895729e+00,  // 325
                                           8.941711269361848e+00,   // 326
                                           4.825421501055178e-01,   // 327
                                           -5.478585545023000e-01,  // 328
                                           1.260547001977193e+00,   // 329
                                           2.731591090841679e+00,   // 330
                                           2.215284251954404e-01,   // 331
                                           2.156579511565071e-01,   // 332
                                           2.319338823979965e-01,   // 333
                                           8.087257049086837e-01,   // 334
                                           3.255588971324979e-01,   // 335
                                           -1.105771153377931e-01,  // 336
                                           -1.766740786574426e-01,  // 337
                                           2.094801425534221e+00,   // 338
                                           -2.090275508817963e-01,  // 339
                                           9.319872484969803e+00,   // 340
                                           -4.156785131171070e-01,  // 341
                                           5.621292273348913e-01,   // 342
                                           -8.408336351154590e-02,  // 343
                                           2.229036135013333e-01,   // 344
                                           -1.469413754138559e+00,  // 345
                                           -6.817140287902390e-02,  // 346
                                           1.401231778062584e+00,   // 347
                                           -1.706595727606174e-02,  // 348
                                           -2.674979693934247e-02,  // 349
                                           -4.850583796089836e-02,  // 350
                                           1.099529118523697e-02,   // 351
                                           -1.887387207696791e+00,  // 352
                                           -1.287269198817168e-01,  // 353
                                           7.132926469820766e-02,   // 354
                                           1.368353803474361e+00,   // 355
                                           3.758181388401994e+00,   // 356
                                           -1.352391962329961e+00,  // 357
                                           2.044320192019511e-01,   // 358
                                           -3.574835894082201e-02,  // 359
                                           1.764818226237686e-02,   // 360
                                           -2.830340182899350e-01,  // 361
                                           9.960271046132452e-01,   // 362
                                           8.874769596038947e-03,   // 363
                                           -2.061266145729648e-02,  // 364
                                           -1.686440906457002e+00,  // 365
                                           6.046434863746448e+01,   // 366
                                           -8.497714281827596e+00,  // 367
                                           1.848273125202301e+00,   // 368
                                           -1.374761044546981e+00,  // 369
                                           -3.713969928188580e-01,  // 370
                                           -9.338541319629135e+00,  // 371
                                           6.529456603967132e+00,   // 372
                                           -4.927128392115831e-01,  // 373
                                           3.018082657610661e-01,   // 374
                                           -2.881477969511409e-01,  // 375
                                           2.185273078817079e+00,   // 376
                                           4.474803778483034e+00,   // 377
                                           1.801487515353195e-01,   // 378
                                           5.898476174681678e-03,   // 379
                                           1.759767218139110e+00,   // 380
                                           -3.496936804631408e-02,  // 381
                                           -4.377809728664659e+00,  // 382
                                           -8.821231764996322e-03,  // 383
                                           5.234939628318133e-01,   // 384
                                           5.343288022070359e-01,   // 385
                                           8.603182782043726e-02,   // 386
                                           -9.858668170332433e-03,  // 387
                                           7.318848929228123e-03,   // 388
                                           6.043208639137611e-01,   // 389
                                           9.856441177264533e-01,   // 390
                                           2.720047877942725e+00,   // 391
                                           4.290572290795938e-02,   // 392
                                           2.289740650489357e-01,   // 393
                                           5.133655201424382e+00,   // 394
                                           -2.358572040003137e-03,  // 395
                                           3.238468982771132e-01,   // 396
                                           7.407500892078273e-02,   // 397
                                           2.364810427906772e+00,   // 398
                                           -2.454167225692113e-01,  // 399
                                           -1.579338491629098e-02,  // 400
                                           3.137697935876042e-02,   // 401
                                           9.363212322507733e-01,   // 402
                                           3.160085053929223e-03,   // 403
                                           -4.362388062025704e-02,  // 404
                                           -3.338148270491047e-01,  // 405
                                           3.512433277313212e+00,   // 406
                                           -2.252450708458283e-02,  // 407
                                           -3.835063389336102e-01,  // 408
                                           1.093558028976510e+00,   // 409
                                           3.829511961659459e+00,   // 410
                                           7.900677297102627e-01,   // 411
                                           3.421815445691257e+01,   // 412
                                           1.377847537253023e-01,   // 413
                                           4.980561292532246e-01,   // 414
                                           8.050001952319746e-01,   // 415
                                           -5.141361799439420e+01,  // 416
                                           3.292159689543247e-03,   // 417
                                           5.114322237662763e+00,   // 418
                                           8.650815702609180e-01,   // 419
                                           2.030376497915853e-02,   // 420
                                           -9.792235453382848e-03,  // 421
                                           -4.224620482328802e-01,  // 422
                                           1.023448531810314e-01,   // 423
                                           1.030049353845745e-01,   // 424
                                           -5.366121348569571e+00,  // 425
                                           3.689416179638266e-02,   // 426
                                           6.062451886289358e-03,   // 427
                                           2.177327904510579e+00,   // 428
                                           -9.626955046430390e-03,  // 429
                                           -2.999582964930025e-01,  // 430
                                           2.283605241371751e+00,   // 431
                                           5.145056352885896e+00,   // 432
                                           5.406884888261351e-02,   // 433
                                           -3.020301865087003e+00,  // 434
                                           -1.241446436011850e+01,  // 435
                                           -4.641059593738930e-01,  // 436
                                           6.341509870381919e-02,   // 437
                                           -1.963354665148274e+00,  // 438
                                           -3.941841436855779e-02,  // 439
                                           1.383309114472098e-02,   // 440
                                           -1.123661606311934e-02,  // 441
                                           1.568569213012520e+00,   // 442
                                           -4.941838443772771e-01,  // 443
                                           -6.268776170162933e+00,  // 444
                                           -2.604612869824214e+00,  // 445
                                           5.180786778487170e-01,   // 446
                                           -2.045916385846823e+00,  // 447
                                           -1.985127580754677e+00,  // 448
                                           -2.038196961777038e-01,  // 449
                                           4.876707599412813e+01,   // 450
                                           -2.555504401153750e-01,  // 451
                                           4.927736791029003e-01,   // 452
                                           -3.455244691029308e+00,  // 453
                                           -5.059307941135180e-01,  // 454
                                           -3.285896186604931e+00,  // 455
                                           1.644207440752399e+00,   // 456
                                           2.030835190414584e-01,   // 457
                                           5.504727705826483e+00,   // 458
                                           -2.064326594590772e-01,  // 459
                                           -8.183794481245146e+00,  // 460
                                           -2.977334561766398e+01,  // 461
                                           -5.140552718271685e-02,  // 462
                                           -1.808725084427733e+01,  // 463
                                           -4.248635853196274e+00,  // 464
                                           -6.185445141106429e+00,  // 465
                                           -2.080970056172712e+00,  // 466
                                           3.218699469735636e-01,   // 467
                                           8.106353328117929e-03,   // 468
                                           -3.479044772871974e+00,  // 469
                                           -3.177149102065555e-04,  // 470
                                           -1.341507751467198e-01,  // 471
                                           -5.749088893557610e+00,  // 472
                                           -3.334476078142693e-02,  // 473
                                           2.479742435882250e+00,   // 474
                                           9.588686900431721e+00,   // 475
                                           -1.398723853853107e-01,  // 476
                                           -2.706814046039642e+00,  // 477
                                           -5.800182780593342e-05,  // 478
                                           -6.587588567555099e-02,  // 479
                                           -1.810582689002940e-03,  // 480
                                           -5.868672417873918e-03,  // 481
                                           -1.593975818472134e+00,  // 482
                                           6.732513625149815e+00,   // 483
                                           4.437753023123531e-02,   // 484
                                           6.258598929334948e-02,   // 485
                                           -1.275653009320152e+00,  // 486
                                           6.248264650090742e-01,   // 487
                                           -1.806262327372135e-01,  // 488
                                           -1.852229956161319e+00,  // 489
                                           3.938165386162846e-03,   // 490
                                           -4.604199263494920e+00,  // 491
                                           -9.055111610432569e-01,  // 492
                                           3.777155983783160e+00,   // 493
                                           -6.559234641434908e+01,  // 494
                                           -1.010290736118795e-02,  // 495
                                           -1.367714965447774e-01,  // 496
                                           -4.157854781414623e+00,  // 497
                                           -8.118972888069212e+00,  // 498
                                           1.373737238452178e+00,   // 499
                                           -6.074079768047726e+00,  // 500
                                           -4.336385284409348e+00,  // 501
                                           4.925404238319448e-02,   // 502
                                           1.873130961148715e-01,   // 503
                                           5.448002643910384e-04,   // 504
                                           -3.463362463618522e-01,  // 505
                                           -2.157197404879674e-03,  // 506
                                           1.881450500544283e-01,   // 507
                                           2.147493124107283e+01,   // 508
                                           -3.725163163146398e-01,  // 509
                                           -1.176292861289991e-02,  // 510
                                           4.705738258420285e-02,   // 511
                                           -5.331948580449724e+00,  // 512
                                           7.983665545548095e-03,   // 513
                                           -3.895433499666630e+00,  // 514
                                           -2.027060968863004e-01,  // 515
                                           -9.308771526164457e-02,  // 516
                                           -1.548786693198495e-01,  // 517
                                           1.857836314045294e-01,   // 518
                                           -1.795617775848295e-02,  // 519
                                           -4.879456343839928e+00,  // 520
                                           -2.188192608181230e+01,  // 521
                                           -4.026923832323735e+01,  // 522
                                           -6.888468392287146e-02,  // 523
                                           8.656892214595171e+00,   // 524
                                           1.383818081894946e+01,   // 525
                                           7.455631662982899e+00,   // 526
                                           2.735369723116229e-01,   // 527
                                           1.531694807664486e-01,   // 528
                                           -5.923228100996308e-02,  // 529
                                           3.793319315500690e-01,   // 530
                                           -7.030702943585080e-01,  // 531
                                           3.204383940918195e+00,   // 532
                                           -1.216156306495532e+00,  // 533
                                           -4.107343971190600e+00,  // 534
                                           -3.464731984290752e-01,  // 535
                                           -2.344517406885198e-01,  // 536
                                           1.767967381508593e-01,   // 537
                                           2.915344400313760e+01,   // 538
                                           -9.570040333442979e+01,  // 539
                                           -6.377833538949563e-01,  // 540
                                           1.117587388828846e-01,   // 541
                                           2.829689820870680e+00,   // 542
                                           3.711152483613158e+00,   // 543
                                           3.534478128712512e+00,   // 544
                                           8.633585720612046e-02,   // 545
                                           1.184098894011909e-01,   // 546
                                           -9.123105951696944e-01,  // 547
                                           3.350478780585447e+00,   // 548
                                           1.736074057665078e+00,   // 549
                                           1.541842398396763e-01,   // 550
                                           -1.002006056828860e-01,  // 551
                                           -1.305188437602370e+00,  // 552
                                           -1.669416590641297e+00,  // 553
                                           8.086400819718569e-02,   // 554
                                           -5.905626832265501e-01,  // 555
                                           -4.066682153638159e+01,  // 556
                                           8.074604515187499e-04,   // 557
                                           -1.580683782554064e+00,  // 558
                                           -2.372191471676842e-02,  // 559
                                           6.433269225911292e-01,   // 560
                                           5.804033152685970e+00,   // 561
                                           1.187655708276600e+00,   // 562
                                           5.379443626002454e-03,   // 563
                                           2.212883844384310e-01,   // 564
                                           9.987091022338287e-02,   // 565
                                           2.405346833436147e+01,   // 566
                                           1.740308760337473e-01,   // 567
                                           -4.232771416245833e-02,  // 568
                                           -1.090895276781242e+00,  // 569
                                           2.981704569116016e-01,   // 570
                                           -1.510251454734733e-01,  // 571
                                           2.760091867549163e-03,   // 572
                                           5.436894463792704e-02,   // 573
                                           -1.089513790572363e-01,  // 574
                                           1.414062625918333e+01,   // 575
                                           2.078161598718186e-01,   // 576
                                           -1.896099956447799e-01,  // 577
                                           1.560034045746270e-01,   // 578
                                           -6.143497693355704e-01,  // 579
                                           -8.332624907706151e+00,  // 580
                                           -1.197404535178031e-01,  // 581
                                           5.304671647290613e-01,   // 582
                                           1.475342597795563e+01,   // 583
                                           -4.573960887210238e+01,  // 584
                                           2.131785886458007e+00,   // 585
                                           4.187351969610376e+01,   // 586
                                           -8.991789510628198e-01,  // 587
                                           4.009813144021417e+01,   // 588
                                           1.489400104444339e-01,   // 589
                                           -2.646518797917393e+01,  // 590
                                           -1.925071888915734e-01,  // 591
                                           4.540145801210142e-01,   // 592
                                           -9.338238530790431e-02,  // 593
                                           -6.383814484245158e-01,  // 594
                                           -9.220226360523577e-01,  // 595
                                           -1.017794860655669e+00,  // 596
                                           -6.148565979405152e-03,  // 597
                                           -1.855425433851564e-01,  // 598
                                           4.317849492767627e+00,   // 599
                                           8.636859064874471e+01,   // 600
                                           -3.442973722470187e-02,  // 601
                                           1.055338502136508e+00};  // 602

        m_k_intra_AB = 7.981769253199138e-01;  // A^(-1))
        m_d_intra_AB = 4.040819683827504e+00;  // A^(-1))
        m_k_intra_BB = 2.579463880579890e-01;  // A^(-1))
        m_d_intra_BB = 2.377019586697373e+00;  // A^(-1))
        m_k_intra_CD = 3.688427221099756e-01;  // A^(-1))
        m_d_intra_CD = 4.333852019203771e+00;  // A^(-1))
        m_k_intra_DD = 7.091344939292101e-01;  // A^(-1))
        m_d_intra_DD = 3.168984322065454e+00;  // A^(-1))
        m_k_AC = 1.564512113339641e+00;        // A^(-1))
        m_d_AC = 3.257864349051078e+00;        // A^(-1))
        m_k_AD = 6.622458897222858e-01;        // A^(-1))
        m_d_AD = 3.893753782478246e+00;        // A^(-1))
        m_k_BC = 1.206761651281590e+00;        // A^(-1))
        m_d_BC = 2.837093011555366e+00;        // A^(-1))
        m_k_BD = 7.972437249347342e-01;        // A^(-1))
        m_d_BD = 5.352114146493275e+00;        // A^(-1))
        m_k_CZ = 1.291962400963017e+00;        // A^(-1))
        m_d_CZ = 4.726091329507012e+00;        // A^(-1))
        m_k_DZ = 4.825788863998004e-01;        // A^(-1))
        m_d_DZ = 5.184523093153075e+00;        // A^(-1))
        m_r2i = 8.000000000000000e+00;         // A
        m_r2f = 9.000000000000000e+00;         // A
    }
}

double x2b_A1B2Z2_C1D4_v1x::f_switch(const double& r, double& g) const {
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI / (m_r2f - m_r2i);
        const double x = (r - m_r2i) * t1;
        g = -std::sin(x) * t1 / 2.0;
        return (1.0 + std::cos(x)) / 2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_A1B2Z2_C1D4_v1x::eval(const double* xyz1, const double* xyz2, const size_t ndim) const {
#ifdef DEBUG
    std::cerr << "\nEntering " << __func__ << " in " << __FILE__ << std::endl;
#endif

    std::vector<double> energies(ndim, 0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[9];
        double mon2[15];

        std::copy(xyz1 + j * 9, xyz1 + (j + 1) * 9, mon1);
        std::copy(xyz2 + j * 15, xyz2 + (j + 1) * 15, mon2);

        const double d12[3] = {mon1[0] - mon2[0], mon1[1] - mon2[1], mon1[2] - mon2[2]};

        const double r12sq = d12[0] * d12[0] + d12[1] * d12[1] + d12[2] * d12[2];
        const double r12 = std::sqrt(r12sq);

        if (r12 > m_r2f) continue;

        double xcrd[24];  // coordinates of real sites ONLY

        std::copy(mon1, mon1 + 9, xcrd);
        std::copy(mon2, mon2 + 15, xcrd + 9);

        double v[38];

        double sw = 0.0;
        double gsw = 0.0;

        const double* A_1_a = xcrd + 0;
        const double* B_1_a = xcrd + 3;
        const double* B_2_a = xcrd + 6;

        const double* C_1_b = xcrd + 9;
        const double* D_1_b = xcrd + 12;
        const double* D_2_b = xcrd + 15;
        const double* D_3_b = xcrd + 18;
        const double* D_4_b = xcrd + 21;

        double Z_1_a[3];
        double Z_2_a[3];

        //    vsites virt;
        double w12 = -9.721486914088159e-02;  // from MBpol
        double w13 = -9.721486914088159e-02;
        double wcross = 9.859272078406150e-02;

        monomer m;

        m.setup(A_1_a, w12, wcross, Z_1_a, Z_2_a);

        variable vr[38];

        v[0] = vr[0].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_1_a);
        v[1] = vr[1].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_2_a);
        v[2] = vr[2].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_2_a);

        v[3] = vr[3].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_1_b);
        v[4] = vr[4].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_2_b);
        v[5] = vr[5].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_3_b);
        v[6] = vr[6].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_4_b);
        v[7] = vr[7].v_exp0(m_d_intra_DD, m_k_intra_DD, D_1_b, D_2_b);
        v[8] = vr[8].v_exp0(m_d_intra_DD, m_k_intra_DD, D_1_b, D_3_b);
        v[9] = vr[9].v_exp0(m_d_intra_DD, m_k_intra_DD, D_1_b, D_4_b);
        v[10] = vr[10].v_exp0(m_d_intra_DD, m_k_intra_DD, D_2_b, D_3_b);
        v[11] = vr[11].v_exp0(m_d_intra_DD, m_k_intra_DD, D_2_b, D_4_b);
        v[12] = vr[12].v_exp0(m_d_intra_DD, m_k_intra_DD, D_3_b, D_4_b);

        v[13] = vr[13].v_exp0(m_d_AC, m_k_AC, A_1_a, C_1_b);
        v[14] = vr[14].v_exp0(m_d_AD, m_k_AD, A_1_a, D_1_b);
        v[15] = vr[15].v_exp0(m_d_AD, m_k_AD, A_1_a, D_2_b);
        v[16] = vr[16].v_exp0(m_d_AD, m_k_AD, A_1_a, D_3_b);
        v[17] = vr[17].v_exp0(m_d_AD, m_k_AD, A_1_a, D_4_b);

        v[18] = vr[18].v_exp0(m_d_BC, m_k_BC, B_1_a, C_1_b);
        v[19] = vr[19].v_exp0(m_d_BD, m_k_BD, B_1_a, D_1_b);
        v[20] = vr[20].v_exp0(m_d_BD, m_k_BD, B_1_a, D_2_b);
        v[21] = vr[21].v_exp0(m_d_BD, m_k_BD, B_1_a, D_3_b);
        v[22] = vr[22].v_exp0(m_d_BD, m_k_BD, B_1_a, D_4_b);

        v[23] = vr[23].v_exp0(m_d_BC, m_k_BC, B_2_a, C_1_b);
        v[24] = vr[24].v_exp0(m_d_BD, m_k_BD, B_2_a, D_1_b);
        v[25] = vr[25].v_exp0(m_d_BD, m_k_BD, B_2_a, D_2_b);
        v[26] = vr[26].v_exp0(m_d_BD, m_k_BD, B_2_a, D_3_b);
        v[27] = vr[27].v_exp0(m_d_BD, m_k_BD, B_2_a, D_4_b);

        v[28] = vr[28].v_coul0(m_d_CZ, m_k_CZ, Z_1_a, C_1_b);
        v[29] = vr[29].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_1_b);
        v[30] = vr[30].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_2_b);
        v[31] = vr[31].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_3_b);
        v[32] = vr[32].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_4_b);

        v[33] = vr[33].v_coul0(m_d_CZ, m_k_CZ, Z_2_a, C_1_b);
        v[34] = vr[34].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_1_b);
        v[35] = vr[35].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_2_b);
        v[36] = vr[36].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_3_b);
        v[37] = vr[37].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_4_b);

        sw = f_switch(r12, gsw);

        energies[j] = sw * polynomial::eval(coefficients.data(), v);
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
        energy += energies[i];
    }

#ifdef DEBUG
    std::cerr << std::scientific << std::setprecision(10);
    std::cerr << "\nExiting " << __func__ << " in " << __FILE__ << std::endl;
    std::cerr << "Input coordinates (1) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 9; j++) {
            std::cerr << xyz1[9 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Input coordinates (2) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 15; j++) {
            std::cerr << xyz2[15 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Output energy: " << energy << std::endl;
#endif

    return energy;
}

double x2b_A1B2Z2_C1D4_v1x::eval(const double* xyz1, const double* xyz2, double* grad1, double* grad2,
                                 const size_t ndim, std::vector<double>* virial) const {
#ifdef DEBUG
    std::cerr << std::scientific << std::setprecision(10);
    std::cerr << "\nEntering " << __func__ << " in " << __FILE__ << std::endl;
    std::cerr << "Input coordinates (1) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 9; j++) {
            std::cerr << xyz1[9 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Input coordinates (2) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 15; j++) {
            std::cerr << xyz2[15 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Input gradients (1) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 9; j++) {
            std::cerr << grad1[9 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Input gradients (2) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 15; j++) {
            std::cerr << grad2[15 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Input virial:\n";
    for (size_t i = 0; i < 9; i++) {
        std::cerr << (*virial)[i] << " , ";
    }
    std::cerr << std::endl;
#endif

    std::vector<double> energies(ndim, 0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[9];
        double mon2[15];

        std::copy(xyz1 + j * 9, xyz1 + (j + 1) * 9, mon1);
        std::copy(xyz2 + j * 15, xyz2 + (j + 1) * 15, mon2);

        const double d12[3] = {mon1[0] - mon2[0], mon1[1] - mon2[1], mon1[2] - mon2[2]};

        const double r12sq = d12[0] * d12[0] + d12[1] * d12[1] + d12[2] * d12[2];
        const double r12 = std::sqrt(r12sq);

        if (r12 > m_r2f) continue;

        double xcrd[24];  // coordinates of real sites ONLY

        std::copy(mon1, mon1 + 9, xcrd);
        std::copy(mon2, mon2 + 15, xcrd + 9);

        double v[38];

        double sw = 0.0;
        double gsw = 0.0;

        const double* A_1_a = xcrd + 0;
        const double* B_1_a = xcrd + 3;
        const double* B_2_a = xcrd + 6;

        const double* C_1_b = xcrd + 9;
        const double* D_1_b = xcrd + 12;
        const double* D_2_b = xcrd + 15;
        const double* D_3_b = xcrd + 18;
        const double* D_4_b = xcrd + 21;

        double Z_1_a[3];
        double Z_2_a[3];

        // vsites virt;
        double w12 = -9.721486914088159e-02;  // from MBpol
        double w13 = -9.721486914088159e-02;
        double wcross = 9.859272078406150e-02;

        monomer m;

        m.setup(A_1_a, w12, wcross, Z_1_a, Z_2_a);

        variable vr[38];

        v[0] = vr[0].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_1_a);
        v[1] = vr[1].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_2_a);
        v[2] = vr[2].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_2_a);

        v[3] = vr[3].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_1_b);
        v[4] = vr[4].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_2_b);
        v[5] = vr[5].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_3_b);
        v[6] = vr[6].v_exp0(m_d_intra_CD, m_k_intra_CD, C_1_b, D_4_b);
        v[7] = vr[7].v_exp0(m_d_intra_DD, m_k_intra_DD, D_1_b, D_2_b);
        v[8] = vr[8].v_exp0(m_d_intra_DD, m_k_intra_DD, D_1_b, D_3_b);
        v[9] = vr[9].v_exp0(m_d_intra_DD, m_k_intra_DD, D_1_b, D_4_b);
        v[10] = vr[10].v_exp0(m_d_intra_DD, m_k_intra_DD, D_2_b, D_3_b);
        v[11] = vr[11].v_exp0(m_d_intra_DD, m_k_intra_DD, D_2_b, D_4_b);
        v[12] = vr[12].v_exp0(m_d_intra_DD, m_k_intra_DD, D_3_b, D_4_b);

        v[13] = vr[13].v_exp0(m_d_AC, m_k_AC, A_1_a, C_1_b);
        v[14] = vr[14].v_exp0(m_d_AD, m_k_AD, A_1_a, D_1_b);
        v[15] = vr[15].v_exp0(m_d_AD, m_k_AD, A_1_a, D_2_b);
        v[16] = vr[16].v_exp0(m_d_AD, m_k_AD, A_1_a, D_3_b);
        v[17] = vr[17].v_exp0(m_d_AD, m_k_AD, A_1_a, D_4_b);

        v[18] = vr[18].v_exp0(m_d_BC, m_k_BC, B_1_a, C_1_b);
        v[19] = vr[19].v_exp0(m_d_BD, m_k_BD, B_1_a, D_1_b);
        v[20] = vr[20].v_exp0(m_d_BD, m_k_BD, B_1_a, D_2_b);
        v[21] = vr[21].v_exp0(m_d_BD, m_k_BD, B_1_a, D_3_b);
        v[22] = vr[22].v_exp0(m_d_BD, m_k_BD, B_1_a, D_4_b);

        v[23] = vr[23].v_exp0(m_d_BC, m_k_BC, B_2_a, C_1_b);
        v[24] = vr[24].v_exp0(m_d_BD, m_k_BD, B_2_a, D_1_b);
        v[25] = vr[25].v_exp0(m_d_BD, m_k_BD, B_2_a, D_2_b);
        v[26] = vr[26].v_exp0(m_d_BD, m_k_BD, B_2_a, D_3_b);
        v[27] = vr[27].v_exp0(m_d_BD, m_k_BD, B_2_a, D_4_b);

        v[28] = vr[28].v_coul0(m_d_CZ, m_k_CZ, Z_1_a, C_1_b);
        v[29] = vr[29].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_1_b);
        v[30] = vr[30].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_2_b);
        v[31] = vr[31].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_3_b);
        v[32] = vr[32].v_coul0(m_d_DZ, m_k_DZ, Z_1_a, D_4_b);

        v[33] = vr[33].v_coul0(m_d_CZ, m_k_CZ, Z_2_a, C_1_b);
        v[34] = vr[34].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_1_b);
        v[35] = vr[35].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_2_b);
        v[36] = vr[36].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_3_b);
        v[37] = vr[37].v_coul0(m_d_DZ, m_k_DZ, Z_2_a, D_4_b);

        double g[38];

        sw = f_switch(r12, gsw);

        energies[j] = polynomial::eval(coefficients.data(), v, g);

        double xgrd[30];
        std::fill(xgrd, xgrd + 30, 0.0);

        double* A_1_a_g = xgrd + 0;
        double* B_1_a_g = xgrd + 3;
        double* B_2_a_g = xgrd + 6;

        double* C_1_b_g = xgrd + 9;
        double* D_1_b_g = xgrd + 12;
        double* D_2_b_g = xgrd + 15;
        double* D_3_b_g = xgrd + 18;
        double* D_4_b_g = xgrd + 21;

        double* Z_1_a_g = xgrd + 24;
        double* Z_2_a_g = xgrd + 27;

        vr[0].grads(g[0], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
        vr[1].grads(g[1], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
        vr[2].grads(g[2], B_1_a_g, B_2_a_g, B_1_a, B_2_a);

        vr[3].grads(g[3], C_1_b_g, D_1_b_g, C_1_b, D_1_b);
        vr[4].grads(g[4], C_1_b_g, D_2_b_g, C_1_b, D_2_b);
        vr[5].grads(g[5], C_1_b_g, D_3_b_g, C_1_b, D_3_b);
        vr[6].grads(g[6], C_1_b_g, D_4_b_g, C_1_b, D_4_b);
        vr[7].grads(g[7], D_1_b_g, D_2_b_g, D_1_b, D_2_b);
        vr[8].grads(g[8], D_1_b_g, D_3_b_g, D_1_b, D_3_b);
        vr[9].grads(g[9], D_1_b_g, D_4_b_g, D_1_b, D_4_b);
        vr[10].grads(g[10], D_2_b_g, D_3_b_g, D_2_b, D_3_b);
        vr[11].grads(g[11], D_2_b_g, D_4_b_g, D_2_b, D_4_b);
        vr[12].grads(g[12], D_3_b_g, D_4_b_g, D_3_b, D_4_b);

        vr[13].grads(g[13], A_1_a_g, C_1_b_g, A_1_a, C_1_b);
        vr[14].grads(g[14], A_1_a_g, D_1_b_g, A_1_a, D_1_b);
        vr[15].grads(g[15], A_1_a_g, D_2_b_g, A_1_a, D_2_b);
        vr[16].grads(g[16], A_1_a_g, D_3_b_g, A_1_a, D_3_b);
        vr[17].grads(g[17], A_1_a_g, D_4_b_g, A_1_a, D_4_b);

        vr[18].grads(g[18], B_1_a_g, C_1_b_g, B_1_a, C_1_b);
        vr[19].grads(g[19], B_1_a_g, D_1_b_g, B_1_a, D_1_b);
        vr[20].grads(g[20], B_1_a_g, D_2_b_g, B_1_a, D_2_b);
        vr[21].grads(g[21], B_1_a_g, D_3_b_g, B_1_a, D_3_b);
        vr[22].grads(g[22], B_1_a_g, D_4_b_g, B_1_a, D_4_b);

        vr[23].grads(g[23], B_2_a_g, C_1_b_g, B_2_a, C_1_b);
        vr[24].grads(g[24], B_2_a_g, D_1_b_g, B_2_a, D_1_b);
        vr[25].grads(g[25], B_2_a_g, D_2_b_g, B_2_a, D_2_b);
        vr[26].grads(g[26], B_2_a_g, D_3_b_g, B_2_a, D_3_b);
        vr[27].grads(g[27], B_2_a_g, D_4_b_g, B_2_a, D_4_b);

        vr[28].grads(g[28], Z_1_a_g, C_1_b_g, Z_1_a, C_1_b);
        vr[29].grads(g[29], Z_1_a_g, D_1_b_g, Z_1_a, D_1_b);
        vr[30].grads(g[30], Z_1_a_g, D_2_b_g, Z_1_a, D_2_b);
        vr[31].grads(g[31], Z_1_a_g, D_3_b_g, Z_1_a, D_3_b);
        vr[32].grads(g[32], Z_1_a_g, D_4_b_g, Z_1_a, D_4_b);

        vr[33].grads(g[33], Z_2_a_g, C_1_b_g, Z_2_a, C_1_b);
        vr[34].grads(g[34], Z_2_a_g, D_1_b_g, Z_2_a, D_1_b);
        vr[35].grads(g[35], Z_2_a_g, D_2_b_g, Z_2_a, D_2_b);
        vr[36].grads(g[36], Z_2_a_g, D_3_b_g, Z_2_a, D_3_b);
        vr[37].grads(g[37], Z_2_a_g, D_4_b_g, Z_2_a, D_4_b);

        // ##DEFINE HERE## the redistribution of the gradients

        m.grads(Z_1_a_g, Z_2_a_g, w12, wcross, A_1_a_g);

        for (int i = 0; i < 9; ++i) {
            xgrd[i] *= sw;
        }

        for (int i = 0; i < 15; ++i) {
            xgrd[i + 9] *= sw;
        }

        // gradient of the switch

        gsw *= energies[j] / r12;
        energies[j] *= sw;
        for (int i = 0; i < 3; ++i) {
            const double d = gsw * d12[i];
            xgrd[i] += d;
            xgrd[i + 9] -= d;
        }

        for (int i = 0; i < 9; ++i) {
            grad1[i + j * 9] += xgrd[i];
        }

        for (int i = 0; i < 15; ++i) {
            grad2[i + j * 15] += xgrd[i + 9];
        }

        if (virial != 0) {
            (*virial)[0] += -A_1_a[0] * A_1_a_g[0] - B_1_a[0] * B_1_a_g[0] - B_2_a[0] * B_2_a_g[0] -
                            C_1_b[0] * C_1_b_g[0] - D_1_b[0] * D_1_b_g[0] - D_2_b[0] * D_2_b_g[0] -
                            D_3_b[0] * D_3_b_g[0] - D_4_b[0] * D_4_b_g[0];

            (*virial)[1] += -A_1_a[0] * A_1_a_g[1] - B_1_a[0] * B_1_a_g[1] - B_2_a[0] * B_2_a_g[1] -
                            C_1_b[0] * C_1_b_g[1] - D_1_b[0] * D_1_b_g[1] - D_2_b[0] * D_2_b_g[1] -
                            D_3_b[0] * D_3_b_g[1] - D_4_b[0] * D_4_b_g[1];

            (*virial)[2] += -A_1_a[0] * A_1_a_g[2] - B_1_a[0] * B_1_a_g[2] - B_2_a[0] * B_2_a_g[2] -
                            C_1_b[0] * C_1_b_g[2] - D_1_b[0] * D_1_b_g[2] - D_2_b[0] * D_2_b_g[2] -
                            D_3_b[0] * D_3_b_g[2] - D_4_b[0] * D_4_b_g[2];

            (*virial)[4] += -A_1_a[1] * A_1_a_g[1] - B_1_a[1] * B_1_a_g[1] - B_2_a[1] * B_2_a_g[1] -
                            C_1_b[1] * C_1_b_g[1] - D_1_b[1] * D_1_b_g[1] - D_2_b[1] * D_2_b_g[1] -
                            D_3_b[1] * D_3_b_g[1] - D_4_b[1] * D_4_b_g[1];

            (*virial)[5] += -A_1_a[1] * A_1_a_g[2] - B_1_a[1] * B_1_a_g[2] - B_2_a[1] * B_2_a_g[2] -
                            C_1_b[1] * C_1_b_g[2] - D_1_b[1] * D_1_b_g[2] - D_2_b[1] * D_2_b_g[2] -
                            D_3_b[1] * D_3_b_g[2] - D_4_b[1] * D_4_b_g[2];

            (*virial)[8] += -A_1_a[2] * A_1_a_g[2] - B_1_a[2] * B_1_a_g[2] - B_2_a[2] * B_2_a_g[2] -
                            C_1_b[2] * C_1_b_g[2] - D_1_b[2] * D_1_b_g[2] - D_2_b[2] * D_2_b_g[2] -
                            D_3_b[2] * D_3_b_g[2] - D_4_b[2] * D_4_b_g[2];

            (*virial)[3] = (*virial)[1];
            (*virial)[6] = (*virial)[2];
            (*virial)[7] = (*virial)[5];
        }
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
        energy += energies[i];
    }

#ifdef DEBUG
    std::cerr << std::scientific << std::setprecision(10);
    std::cerr << "\nExiting " << __func__ << " in " << __FILE__ << std::endl;
    std::cerr << "Output energy: " << energy << std::endl;
    std::cerr << "Output gradients (1) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 9; j++) {
            std::cerr << grad1[9 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Output gradients (2) for " << ndim << " monomers:\n";
    for (size_t i = 0; i < ndim; i++) {
        for (size_t j = 0; j < 15; j++) {
            std::cerr << grad2[15 * i + j] << " , ";
        }
        std::cerr << std::endl;
    }
    std::cerr << "Output virial:\n";
    for (size_t i = 0; i < 9; i++) {
        std::cerr << (*virial)[i] << " , ";
    }
    std::cerr << std::endl;
#endif

    return energy;
}

}  // namespace x2b_A1B2Z2_C1D4_deg3_exp0

////////////////////////////////////////////////////////////////////////////////
